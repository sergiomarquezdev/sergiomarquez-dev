This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: .github/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/copilot-instructions.md
.github/dependabot.yml
.github/workflows/ci.yml
.github/workflows/dependency-updates.yml
.github/workflows/deploy.yml
.github/workflows/health-monitor.yml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/copilot-instructions.md">
# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state in the `/docs/scratchpad.md` file, which has references to implementation plan in the `/docs/implementation-plan/{task-name-slug}.md` file. Your goal is to complete the user's final requirements.

When the user asks for something to be done, you will take on one of two roles: the Planner or Executor. Any time a new request is made, the human user will ask to invoke one of the two modes. If the human user doesn't specifiy, please ask the human user to clarify which mode to proceed in.

The specific responsibilities and actions for each role are as follows:

## Role Descriptions

1. Planner
   - Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. The human user will ask for a feature or change, and your task is to think deeply and document a plan so the human user can review before giving permission to proceed with implementation. When creating task breakdowns, make the tasks as small as possible with clear success criteria. Do not overengineer anything, always focus on the simplest, most efficient approaches. For example, if the task has an UI and api implementation, make sure to break down the task into smaller tasks prioritizing the UI implementation first and confirm that it works fully before moving to implmenet the API side. If you have a question, ask the human user for clarification.
   - Actions: Revise the file referenced implementation detail referenced in the `/docs/scratchpad.md` file to update the plan accordingly including any lessons learned.
   - **Discipline:** Always re-read the full task breakdown and acceptance criteria before starting. Update the implementation plan and scratchpad with every insight, blocker, or lesson learned. Strive for clarity, completeness, and continuous self-review.
2. Executor
   - Responsibilities: Execute specific tasks referenced implementation detail `/docs/implementation-plan/{task-name-slug}.md` in `/docs/scratchpad.md`, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the human at the right time, e.g. after completion some milestone or after you've hit a blocker. Simply communicate with the human user to get help when you need it.
   - Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to `/docs/implementation-plan/{task-name-slug}.md` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections; if you encounter an error or bug and find a solution, document the solution in "Lessons Learned" to avoid running into the error or bug again in the future.
   - **Discipline:** For every vertical slice: run `git status` before and after every commit, run the test suite and check coverage, update the implementation plan and scratchpad, and pause to review checklists and status board before moving on. Never mark a subtask as complete until all requirements are met and documented.

## Document Conventions

- The `/docs/scratchpad.md` file has references to several implementation detail files found in the `/docs/implementation-plan/{task-name-slug}.md`. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
- The implementation detail files will have sections like "Background and Motivation" and "Key Challenges and Analysis" that are generally established by the Planner initially and gradually appended during task progress.
- The implementation detail "High-level Task Breakdown" is a step-by-step implementation plan for the request. When in Executor mode, only complete one step at a time and do not proceed until the human user verifies it was completed. Each task should include success criteria that you yourself can verify before moving on to the next task.
- The implementation detail "Project Status Board" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
- The implementation detail "Project Status Board" serves as a project management area to facilitate project management for both the planner and executor. It follows simple markdown todo format.
- **Checklist Rigor:** After every vertical slice, update all relevant checklists and status boards. Mark subtasks as "in progress" or "partially complete" if not fully done. Never mark a task as done until all checklists, documentation, and code/tests are complete and committed.

## Workflow Guidelines

- After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
- When thinking as a Planner, always record results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
- When you as an Executor receive new instructions, use the existing tools and workflow to execute those tasks. After completion, write back to the "Project Status Board" and "Executor's Feedback or Assistance Requests" sections in the `/docs/implementation-plan/{task-name-slug}.md` file.
- Adopt Test Driven Development (TDD) as much as possible. Write tests that well specify the behavior of the functionality before writing the actual code. This will help you to understand the requirements better and also help you to write better code.
- Test each functionality you implement. If you find any bugs, fix them before moving to the next task.
- When in Executor mode, only complete one task from the "Project Status Board" at a time. Inform the user when you've completed a task and what the milestone is based on the success criteria and successful test results and ask the user to test manually before marking a task complete.
- Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `/docs/implementation-plan/{task-name-slug}.md` file.
- If there are any lessons learned, add it to "Lessons Learned" in the `/docs/scratchpad.md` file to make sure you don't make the same mistake again. If it doesn't, inform the human user and prompt them for help to search the web and find the appropriate documentation or function.
- Once you've completed a task, update the "Project Status Board" and "Executor's Feedback or Assistance Requests" sections in the `/docs/implementation-plan/{task-name-slug}.md` file, and then update the file referenced file as done in the `/docs/scratchpad.md` file as well as the PR you created.
- **Pause and Reflect:** After every vertical slice, pause to review the implementation plan, checklists, and codebase for completeness. If a mistake or blocker occurs, stop, analyze the root cause, and document the fix and lesson learned before proceeding.
- **Continuous Improvement:** Regularly review and update lessons learned in `/docs/scratchpad.md`. Strive for clarity, completeness, and continuous self-review in all work, inspired by John Carmack's engineering discipline.

### Please note:

- Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the human user planner for confirmation. Then the Planner needs to do some cross-checking.
- Avoid rewriting the entire any documents unless necessary;
- Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
- When new external information is needed, you can inform the human user planner about what you need, but document the purpose and results of such requests;
- Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
- During your interaction with the human user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons Learned` section in the `/docs/scratchpad.md` file so you will not make the same mistake again. Each lessons learned should be a single item in the list and have a date and time stamp in the format `[YYYY-MM-DD]`.
- If the Executor makes the same mistake 3 times, it must stop, reflect, and explicitly ask itself 'What would John Carmack do?' before suggesting the next step. The Executor must document this reflection and the corrective action in the scratchpad before proceeding.
- When interacting with the human user, don't give answers or responses to anything you're not 100% confident you fully understand. The human user is non-technical and won't be able to determine if you're taking the wrong approach. If you're not sure about something, just say it.

### User Specified Lessons

- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
  # Enable version updates for npm (excluding Tailwind CSS)
  # Note: Tailwind CSS updates are manually managed due to Astro compatibility
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "09:00"
      timezone: "Europe/Madrid"
    open-pull-requests-limit: 5
    reviewers:
      - "sergiomarquezdev"
    assignees:
      - "sergiomarquezdev"
    commit-message:
      prefix: "📦"
      include: "scope"
    labels:
      - "dependencies"
      - "automated"
    ignore:
      # Ignore Tailwind CSS updates due to potential Astro compatibility issues
      - dependency-name: "tailwindcss"
      - dependency-name: "autoprefixer"
      # Ignore PostCSS related updates that might conflict with Tailwind
      - dependency-name: "postcss"

  # Enable security updates
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "daily"
    open-pull-requests-limit: 10
    target-branch: "main"
    commit-message:
      prefix: "🔒"
      include: "scope"
    labels:
      - "security"
      - "automated"
      - "priority"

  # GitHub Actions workflow updates
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "monthly"
    commit-message:
      prefix: "🚀"
      include: "scope"
    labels:
      - "github-actions"
      - "automated"
</file>

<file path=".github/workflows/deploy.yml">
name: Build and Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build
</file>

<file path=".github/workflows/health-monitor.yml">
name: 🔍 Health Monitor & Alerts (Cloudflare Pages)

on:
  schedule:
    # Run every 6 hours to monitor site health
    - cron: "0 */6 * * *"
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  health-monitor:
    name: 🏥 Continuous Health Monitor
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 🔍 Site availability check
        id: health_check
        run: |
          echo "🔍 Checking site health..."

          # Initialize counters
          FAILED_CHECKS=0
          TOTAL_CHECKS=0

          # Function to check URL
          check_url() {
            local url=$1
            local name=$2
            TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

            if curl -f -s -o /dev/null --max-time 10 "$url"; then
              echo "✅ $name: OK"
              return 0
            else
              echo "❌ $name: FAILED"
              FAILED_CHECKS=$((FAILED_CHECKS + 1))
              return 1
            fi
          }

          # Check main endpoints
          check_url "https://sergiomarquez.dev" "Homepage"
          check_url "https://sergiomarquez.dev/privacy" "Privacy Page"

          # Set outputs for next steps
          echo "failed_checks=$FAILED_CHECKS" >> $GITHUB_OUTPUT
          echo "total_checks=$TOTAL_CHECKS" >> $GITHUB_OUTPUT

          if [ "$FAILED_CHECKS" -gt 0 ]; then
            echo "⚠️ Health check failed: $FAILED_CHECKS/$TOTAL_CHECKS checks failed"
            exit 1
          else
            echo "✅ All health checks passed: $TOTAL_CHECKS/$TOTAL_CHECKS"
          fi

      - name: 📊 Performance monitoring
        if: success()
        run: |
          echo "📊 Performance check..."

          # Measure homepage load time
          START_TIME=$(date +%s%N)
          curl -f -s -o /dev/null "https://sergiomarquez.dev"
          END_TIME=$(date +%s%N)
          DURATION=$(( (END_TIME - START_TIME) / 1000000 ))

          echo "⏱️ Homepage load time: ${DURATION}ms"

          # Check if performance is acceptable
          if [ "$DURATION" -gt 5000 ]; then
            echo "⚠️ Performance degradation detected: ${DURATION}ms"
            echo "PERFORMANCE_ISSUE=true" >> $GITHUB_ENV
          else
            echo "✅ Performance acceptable: ${DURATION}ms"
          fi

      - name: 🤖 Create issue for failures
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Site Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## 🚨 Automated Health Check Failure

            **Timestamp**: ${new Date().toISOString()}
            **Failed Checks**: ${{ steps.health_check.outputs.failed_checks }}/${{ steps.health_check.outputs.total_checks }}

            ### 🔍 What to check:
            - [ ] Site accessibility: https://sergiomarquez.dev
            - [ ] Privacy page: https://sergiomarquez.dev/privacy

            ### 🛠️ Potential causes:
            - Cloudflare Pages deployment issue
            - DNS issues
            - SSL certificate problems
            - Build failure in Cloudflare

            ### 🔧 Next steps:
            1. Check Cloudflare Pages dashboard
            2. Verify latest deployment status
            3. Check build logs in Cloudflare
            4. Verify DNS configuration
            5. Run manual health checks

            ### 🌐 Cloudflare Pages Info:
            - Auto-deploy from main branch
            - Build command: \`npm run build\`
            - Output directory: \`dist\`

            ---
            *This issue was automatically created by the health monitor workflow.*
            `;

            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check,automated'
            });

            const existingIssue = issues.find(issue =>
              issue.title.includes('Site Health Check Failed') &&
              issue.created_at > new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'health-check', 'automated', 'high-priority', 'cloudflare']
              });
              console.log('Created new health check issue');
            } else {
              console.log('Similar issue already exists, skipping creation');
            }

      - name: 📈 Log successful check
        if: success()
        run: |
          echo "✅ Health monitoring completed successfully"
          echo "📊 All systems operational"
          echo "🌐 Cloudflare Pages deployment healthy"
          echo "🕐 Next check in 6 hours"
</file>

<file path=".github/workflows/dependency-updates.yml">
name: 🤖 Auto-Fix Common Issues

on:
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fix to apply'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - linting
          - dependencies
          - formatting
          - security

  schedule:
    # Run weekly maintenance on Sundays at 2 AM
    - cron: '0 2 * * 0'

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-fix:
    name: 🔧 Automated Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Set up Node.js 22.x
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Auto-fix linting and formatting
        if: github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'linting' || github.event.inputs.fix_type == 'formatting'
        run: |
          echo "🧹 Running auto-fix for linting and formatting..."

          # Save current state
          git stash push -m "Pre-autofix state" || true

          # Apply fixes
          npm run lint:fix || true
          npm run format || true

          # Check for changes
          if ! git diff --quiet; then
            echo "✅ Applied auto-fixes"
            echo "LINTING_FIXED=true" >> $GITHUB_ENV
          else
            echo "ℹ️ No linting issues to fix"
            echo "LINTING_FIXED=false" >> $GITHUB_ENV
          fi

      - name: 🔒 Security updates
        if: github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'security'
        run: |
          echo "🔒 Checking for security updates..."

          # Check for vulnerabilities
          if npm audit --audit-level=moderate; then
            echo "✅ No security vulnerabilities found"
            echo "SECURITY_FIXED=false" >> $GITHUB_ENV
          else
            echo "🔧 Applying security fixes..."
            npm audit fix --force || true

            if ! git diff --quiet package*.json; then
              echo "✅ Applied security updates"
              echo "SECURITY_FIXED=true" >> $GITHUB_ENV
            else
              echo "ℹ️ No automatic security fixes available"
              echo "SECURITY_FIXED=false" >> $GITHUB_ENV
            fi
          fi

      - name: 📦 Dependency updates
        if: github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'dependencies'
        run: |
          echo "📦 Checking for dependency updates..."

          # This is a conservative approach - only patch updates
          # Major/minor updates should be handled by Dependabot PRs
          # CRITICAL: Tailwind CSS excluded due to Astro compatibility

          echo "ℹ️ Dependency updates handled by Dependabot"
          echo "ℹ️ Tailwind CSS updates excluded (Astro compatibility)"
          echo "ℹ️ Only security fixes applied automatically"
          echo "DEPS_UPDATED=false" >> $GITHUB_ENV

      - name: 🧪 Verify fixes don't break anything
        run: |
          echo "🧪 Testing that fixes don't break the build..."

          # Run full validation
          npm run validate
          npm run build

          echo "✅ All fixes verified successfully"

      - name: 📝 Create commit with fixes
        run: |
          echo "📝 Checking if commits are needed..."

          if ! git diff --quiet; then
            echo "📝 Committing automated fixes..."

            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action Auto-Fix Bot"

            # Prepare commit message
            COMMIT_MSG="🤖 Automated maintenance fixes

            - 🧹 Applied ESLint and Prettier fixes
            - 🔒 Applied security updates if any
            - ⚠️ Tailwind CSS excluded (Astro compatibility)

            Automated maintenance run on $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

            git add .
            git commit -m "$COMMIT_MSG"
            git push origin main

            echo "✅ Fixes committed and pushed successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: 📊 Summary report
        if: always()
        run: |
          echo "📊 Auto-fix Summary Report"
          echo "=========================="
          echo "🕐 Run time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🎯 Fix type: ${{ github.event.inputs.fix_type || 'scheduled' }}"
          echo ""
          echo "✅ Automated maintenance completed"
          echo "⚠️ Tailwind CSS updates excluded (Astro compatibility)"
          echo "ℹ️ Check git log for any applied fixes"
          npm run validate

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "🔄 Weekly dependency updates"
          body: |
            Automated dependency updates.

            - Dependencies updated to latest versions
            - Security vulnerabilities fixed
            - All tests passing

            Please review and merge if all checks pass.
          branch: dependency-updates
          delete-branch: true
</file>

<file path=".github/workflows/ci.yml">
name: 🚀 CI/CD - Build & Validate (Cloudflare Pages Deploy)

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".editorconfig"
      - ".gitignore"
      - "docs/**"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".editorconfig"
      - ".gitignore"
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # 🧪 Testing & Quality Assurance
  test-and-validate:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5.0.0

      - name: ⚙️ Set up Node.js 22.x
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔎 TypeScript validation
        run: |
          echo "🔍 Running TypeScript check..."
          npm run type-check
          echo "✅ TypeScript validation passed!"

      - name: 🧹 ESLint code quality
        run: |
          echo "🧹 Running ESLint..."
          npm run lint
          echo "✅ Code quality check completed!"

      - name: 💄 Prettier formatting check
        run: |
          echo "💄 Checking code formatting..."
          npm run format:check
          echo "✅ Code formatting validated!"

      - name: 🔍 Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate
          echo "✅ Security audit completed!"

      - name: 📦 Dependency validation
        run: |
          echo "📦 Validating dependencies..."
          npm ls --depth=0
          echo "✅ Dependencies validated!"

  # 🏗️ Build Validation (Cloudflare handles actual deployment)
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    needs: test-and-validate
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5.0.0

      - name: ⚙️ Set up Node.js 22.x
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build Astro portfolio
        run: |
          echo "🏗️ Building Astro portfolio..."
          npm run build
          echo "✅ Build completed successfully!"
          echo "🌐 Deployment will be handled by Cloudflare Pages"

      - name: 📊 Verify build output & metrics
        run: |
          echo "📊 Build metrics:"
          echo "📁 Build output size:"
          du -sh dist/

          echo ""
          echo "📄 Generated files breakdown:"
          HTML_COUNT=$(find dist/ -name "*.html" | wc -l)
          JS_COUNT=$(find dist/ -name "*.js" | wc -l)
          CSS_COUNT=$(find dist/ -name "*.css" | wc -l)

          echo "📄 HTML files: $HTML_COUNT"
          echo "📜 JS files: $JS_COUNT"
          echo "🎨 CSS files: $CSS_COUNT"

          echo ""
          echo "🎯 Portfolio validation:"
          if [ "$HTML_COUNT" -ge 5 ]; then
            echo "✅ HTML pages: $HTML_COUNT (target: 5+)"
          else
            echo "⚠️ HTML pages: $HTML_COUNT (expected: 5+)"
          fi

          echo ""
          echo "🌐 Ready for Cloudflare Pages deployment"
          echo "   • Auto-deploy on main branch push"
          echo "   • Preview deploys on PRs"

      - name: 🧪 Test site preview
        run: |
          echo "🧪 Testing site preview..."
          timeout 15s npm run preview > preview.log 2>&1 || true
          echo "✅ Preview test completed"

          # Check if preview started successfully
          if grep -q "Local:" preview.log; then
            echo "✅ Preview server started successfully"
          else
            echo "ℹ️ Preview test completed (timeout expected)"
          fi

  # 🤖 Auto-Fix Common Issues
  auto-fix-issues:
    name: 🤖 Auto-Fix & Dependencies
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [test-and-validate, build-validation]
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Set up Node.js 22.x
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: "npm"

      - name: 🔧 Auto-fix linting issues
        run: |
          echo "🔧 Attempting to auto-fix linting issues..."
          npm ci
          npm run lint:fix || true
          npm run format || true

          # Check if files were modified
          if git diff --quiet; then
            echo "ℹ️ No auto-fixable issues found"
          else
            echo "🔧 Auto-fixed some issues, committing..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action Auto-Fix"
            git add .
            git commit -m "🤖 Auto-fix: ESLint and Prettier formatting

            - Applied automatic linting fixes
            - Standardized code formatting
            - Triggered by failed CI pipeline
            - Cloudflare Pages will auto-deploy these fixes"
            git push
          fi

      - name: 🔄 Update dependencies (if needed)
        run: |
          echo "🔄 Checking for dependency updates..."

          # Check for security vulnerabilities
          if npm audit --audit-level=moderate; then
            echo "✅ No critical security issues"
          else
            echo "🔧 Attempting to fix security issues..."
            npm audit fix --force || true

            if ! git diff --quiet package*.json; then
              echo "📦 Dependencies updated, committing..."
              git add package*.json
              git commit -m "🔒 Security: Auto-update vulnerable dependencies

              - Fixed security vulnerabilities via npm audit fix
              - Automated dependency security update
              - Cloudflare Pages will deploy these security fixes"
              git push
            fi
          fi
  #
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dist
  #         path: dist/
  #
  #     - name: Deploy to hosting
  #       run: echo "Deploy step would go here"
</file>

</files>
